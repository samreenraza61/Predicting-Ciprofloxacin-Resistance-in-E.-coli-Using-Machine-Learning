# -*- coding: utf-8 -*-
"""Machine_Learning_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bgb25IJDXwcypbC3G8LKm4cCk1iGAgev
"""

import pandas as pd
from google.colab import files


# 1. Upload the file
uploaded = files.upload()

# 2. Load the file
df = pd.read_csv("BVBRC_E.coli_Dataset.csv")

# 3. Check the first few rows
df.head()

# Keep only rows where Resistant Phenotype is either 'Resistant' or 'Susceptible'
df = df[df["Resistant Phenotype"].isin(["Resistant", "Susceptible"])]

# Filter for only one antibiotic (e.g., Ciprofloxacin)
df = df[df["Antibiotic"].str.lower() == "ciprofloxacin"]

# Remove rows with missing values in key columns
df = df.dropna(subset=["Measurement Value", "Measurement Sign", "Testing Standard"])

# Convert Resistant Phenotype to binary target
df["is_resistant"] = df["Resistant Phenotype"].map({"Resistant": 1, "Susceptible": 0})

# Select only necessary columns for modeling
features = ["Antibiotic", "Measurement Value", "Measurement Sign", "Testing Standard"]
df = df[features + ["is_resistant"]]

# Show the cleaned DataFrame
df.head()

# Convert Measurement Sign to numeric codes
df["Measurement Sign"] = df["Measurement Sign"].map({"<=": -1, "<": -2, ">": 1, ">=": 2, "=": 0})

# One-hot encode categorical variables (Antibiotic and Testing Standard)
df_encoded = pd.get_dummies(df, columns=["Antibiotic", "Testing Standard"])

# Split into features (X) and label (y)
X = df_encoded.drop("is_resistant", axis=1)
y = df_encoded["is_resistant"]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

# Train models
rf = RandomForestClassifier()
rf.fit(X_train, y_train)

lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)

svm = SVC()
svm.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

def evaluate(model, name):
    y_pred = model.predict(X_test)
    print(f"üîç {name} Accuracy: {accuracy_score(y_test, y_pred):.2f}")
    print(classification_report(y_test, y_pred))
    sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap="Blues")
    plt.title(f"{name} Confusion Matrix")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

evaluate(rf, "Random Forest")
evaluate(lr, "Logistic Regression")
evaluate(svm, "SVM")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Get feature importance from trained Random Forest model
importances = rf.feature_importances_
features = X.columns

# Create a DataFrame to hold feature names and their importance
feat_df = pd.DataFrame({
    "Feature": features,
    "Importance": importances
})

# Sort by importance (descending)
feat_df = feat_df.sort_values("Importance", ascending=False).head(10)

# Plot top 10 features
plt.figure(figsize=(8, 5))
sns.barplot(x="Importance", y="Feature", data=feat_df, palette="viridis")
plt.title("üîç Top 10 Important Features (Random Forest)")
plt.xlabel("Feature Importance Score")
plt.ylabel("Features")
plt.tight_layout()
plt.show()